{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","padding","spacing","margin","textAlign","color","palette","text","secondary","dates","selectedDates","stringDates","timelineData","CustomTooltip","this","props","active","payload","date","React","Component","App","classes","useState","Date","displayDate","setSelectedDate","Paper","className","Typography","variant","utils","DateFnsUtils","id","label","format","value","onChange","setHours","push","length","shift","map","dateObject","toISOString","split","container","parse","KeyboardButtonProps","join","height","dataKey","domain","type","tick","hide","data","cursor","content","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uSAcMA,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,SAAU,EACVC,QAASH,EAAMI,QAAQ,GACvBC,OAAQL,EAAMI,QAAQ,GACtBE,UAAW,SACXC,MAAOP,EAAMQ,QAAQC,KAAKC,WAE5BC,MAAO,CACLN,OAAQL,EAAMI,QAAQ,QAQtBQ,EAAgB,GAChBC,EAAc,GACdC,EAAe,GAMbC,E,iLAKF,GAFmBC,KAAKC,MAAhBC,OAEI,CAAC,IACHC,EAAYH,KAAKC,MAAjBE,QACR,OAAO,2BAAIA,EAAQ,GAAGA,QAAQC,MAGhC,OAAO,S,GAViBC,IAAMC,WAwGnBC,MArFf,WAEE,IAAMC,EAAU1B,IAFH,EAK0BuB,IAAMI,SAAS,IAAIC,MAL7C,mBAKNC,EALM,KAKOC,EALP,KAwCb,OACE,kBAACC,EAAA,EAAD,CAAOC,UAAWN,EAAQvB,MACxB,kBAAC8B,EAAA,EAAD,CAAYC,QAAQ,MAApB,mBAGA,kBAACD,EAAA,EAAD,CAAYC,QAAQ,MAApB,yBAGA,kBAAC,IAAD,CAAyBC,MAAOC,KAC9B,kBAAC,IAAD,CACE7B,OAAO,SACP8B,GAAG,qBACHC,MAAM,cACNC,OAAO,aACPC,MAAOX,EACPY,SA9CiB,SAAAnB,GAGvBQ,EAAgBR,GAGhBA,EAAKoB,SAAS,GAGd5B,EAAc6B,KAAKrB,GAGfR,EAAc8B,OAAS,IACzB9B,EAAc+B,QAIhB9B,EAAcD,EAAcgC,KAAI,SAAAC,GAAU,OAAIA,EAAWC,cAAcC,MAAM,KAAK,MAGlFjC,EAAeF,EAAcgC,KAAI,SAAAC,GAC/B,IAAIG,EAAY,GAIhB,OAHAA,EAAS,KAAWH,EAAWC,cAAcC,MAAM,KAAK,GACxDC,EAAS,UAAgBtB,KAAKuB,MAAMJ,GACpCG,EAAS,YAAkB,EACpBA,MAsBHE,oBAAqB,CACnB,aAAc,kBAIpB,kBAACnB,EAAA,EAAD,CAAYD,UAAWN,EAAQb,OAC5BE,EAAYsC,KAAK,QAEpB,kBAAC,IAAD,CAAqBC,OAAQ,IAC3B,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,QAAQ,YACRC,OAAQ,CAAC,UAAW,WACpBC,KAAK,SACLC,MAAM,IAER,kBAAC,IAAD,CACEH,QAAQ,cACRE,KAAK,SACLE,MAAM,IAER,kBAAC,IAAD,CAASC,KAAM5C,IACf,kBAAC,IAAD,CAAS6C,QAAQ,EAAOC,QAAS,kBAAC,EAAD,YC5HvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4275cdbb.chunk.js","sourcesContent":["//Import External Libraries\n////////////////////////////////////////////////////////////////////////////////\nimport React  from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from '@material-ui/pickers';\nimport { ScatterChart, XAxis, YAxis, Scatter, Tooltip, ResponsiveContainer } from 'recharts';\n\n\n\n//A few Material-ui formatting details...\n////////////////////////////////////////////////////////////////////////////////\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n    padding: theme.spacing(2),\n    margin: theme.spacing(5),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n  dates: {\n    margin: theme.spacing(5),\n  },\n}));\n  \n\n\n//Lets define some variables we'll use to track dates in various forms\n////////////////////////////////////////////////////////////////////////////////\nvar selectedDates = [];\nvar stringDates = [];\nvar timelineData = [];\n\n\n\n//A quick custom component to modify the tooltip on the timeline\n////////////////////////////////////////////////////////////////////////////////\nclass CustomTooltip extends React.Component {\n  \n  render() {\n    const { active } = this.props;\n\n    if (active) {\n      const { payload } = this.props;\n      return <p>{payload[0].payload.date}</p>;\n    }\n\n    return null;\n  }\n};\n\n\n\n//Our Main Component\n////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\nfunction App() {\n\n  const classes = useStyles();\n\n  //Set default day in the date picker as today \n  const [displayDate, setSelectedDate] = React.useState(new Date());\n\n\n  //Triggered every time a new date is picked\n  const handleDateChange = date => {\n    \n    //Selected date is passed in from date picker\n    setSelectedDate(date);\n    \n    //Reset date object time to fix timezone error\n    date.setHours(0)\n\n    //Add new date to list of dates\n    selectedDates.push(date);\n \n    //If more than 10 selections, remove initial selections.\n    if (selectedDates.length > 10) {\n      selectedDates.shift()\n    }\n\n    //Create an array of YYYY-MM-DD strings for display\n    stringDates = selectedDates.map(dateObject => dateObject.toISOString().split('T')[0]);\n    \n    //Create an array of data objects to feed to the chart\n    timelineData = selectedDates.map(dateObject => {\n      var container = {};\n      container[\"date\"] = dateObject.toISOString().split('T')[0];\n      container[\"timestamp\"] = Date.parse(dateObject);\n      container[\"dummyYValue\"] = 0;\n      return container;\n    });\n  };  \n\n\n  //Now the we define the components\n  return (\n    <Paper className={classes.root}>\n      <Typography variant=\"h4\">\n        Custom Timeline\n      </Typography>\n      <Typography variant=\"h6\">\n        Select up to 10 dates  \n      </Typography>\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\n        <KeyboardDatePicker\n          margin=\"normal\"\n          id=\"date-picker-dialog\"\n          label=\"Date picker\"\n          format=\"yyyy-MM-dd\"\n          value={displayDate}\n          onChange={handleDateChange}\n          KeyboardButtonProps={{\n            'aria-label': 'change date',\n          }}\n        />\n      </MuiPickersUtilsProvider>\n      <Typography className={classes.dates}>\n        {stringDates.join(\",  \")}\n      </Typography>\n      <ResponsiveContainer height={40}>\n        <ScatterChart>\n          <XAxis \n            dataKey=\"timestamp\" \n            domain={['dataMin', 'dataMax']}\n            type='number'\n            tick={false}\n          />\n          <YAxis \n            dataKey=\"dummyYValue\" \n            type='number'\n            hide={true}\n          />\n          <Scatter data={timelineData}/>\n          <Tooltip cursor={false} content={<CustomTooltip/>}/>\n        </ScatterChart>\n      </ResponsiveContainer>\n    </Paper>      \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}